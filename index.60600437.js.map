{"mappings":"uDAUAA,EAAiB,SAAUC,GACvB,IAAIC,EAAMC,EAAcC,EACpBC,EAAeC,EACfC,EAAI,EAKR,IAAMN,EACF,OAAO,SAAUO,GACb,OAAOA,CACX,EAkBJ,IAbAF,EAAc,SAAUG,GACpB,OAAOA,KAASR,EAAQA,EAAMQ,GAASA,CAC3C,EAOAP,EAAOQ,OAAOR,KAAKD,GAAOU,MAAK,SAAUC,EAAEC,GACvC,OAAOA,EAAEC,OAASF,EAAEE,MACxB,IAEOZ,EAAKK,IACe,IAAnBL,EAAKK,GAAGO,OADAP,GAAK,GAmCrB,OA7BAJ,EAAeD,EAAKa,MAAM,EAAER,GAAGS,KAAK,KACpCZ,EAAeF,EAAKa,MAAMR,GAAGS,KAAK,IAClCd,OAAOe,EAcPZ,EAAgB,IAAIa,OAAO,CACvBf,EACAC,EAAe,IAAMA,EAAe,IAAM,IAC5CY,KAAKZ,GAAgBD,EAAe,IAAM,IAAK,KAU1C,SAAUK,GAEb,GAAuB,iBAAZA,EAAsB,CAE7B,IAAIA,GAAuC,mBAArBA,EAAQW,SAK1B,MAAO,GAJPX,EAAUA,EAAQW,UAM1B,CAIA,OAAOX,EAAQY,QAAQf,EAAeC,EAC1C,CACJ,EC3FO,MCGDe,EAAYC,SAASC,cAAc,eACnCC,EAAaF,SAASC,cAAc,gBACpCE,EAAgBC,EAAA1B,EAAA,CDLD,CACjB,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,KACJ,IAAI,KACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,KACJ,IAAI,KACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,KACJ,IAAI,KACJ,IAAI,KACJ,IAAI,KACJ,IAAI,KACJ,IAAI,KACJ,IAAI,IACJ,IAAI,MC3DRqB,EAAUM,iBAAiB,UAAUC,IACjCA,EAAEC,iBACF,MAAMC,EAAYF,EAAEG,OAAOR,cAAc,eAAeS,MAClDC,EAAgBR,EAAcK,GACpCN,EAAWD,cAAc,gBAAgBS,MAAQC,CAAA,IAGrDT,EAAWG,iBAAiB,UAAUC,IAClCM,MAAML,iBACN,MAAMM,EAAeD,MAAMH,OAAOR,cAAc,gBAChDY,EAAaC,QACbD,EAAaE,SACbC,UAAUC,UAAUC,UAAUL,EAAaH,MAAK","sources":["node_modules/translitit-engine/lib/translitit-engine.js","lib/prudeus-ua-table.js","script.js"],"sourcesContent":["/* global module */\n'use strict';\n\n/**\n * Generate a transliteration function from a given transliteration\n * table object.\n *\n * @param [Object] table\n * @return [Function] function that transliterates its input\n */\nmodule.exports = function (table) {\n    var keys, specialCases, singleLetter,\n        searchPattern, lookupTable,\n        i = 0\n    ;\n\n    // If no transliteration table is given, return a function that will\n    // return the input.\n    if (! table) {\n        return function (subject) {\n            return subject;\n        };\n    }\n\n\n    // Function used by the resulting replace function\n    lookupTable = function (input) {\n        return input in table ? table[input] : input;\n    };\n\n\n    // Fetch and sort the keys in the translitteration table object, to\n    // ensure the longest keys in the table is first in the array. Then\n    // it will find the position of the first one-letter index and split\n    // the keys into single letter indexes and longer 'specialCases.'\n    keys = Object.keys(table).sort(function (a,b) {\n        return b.length - a.length;\n    });\n\n    for (; keys[i]; i += 1) {\n        if (keys[i].length === 1) {\n            break; // first one-letter index has been found, break out\n        }\n    }\n\n    specialCases = keys.slice(0,i).join('|');\n    singleLetter = keys.slice(i).join('');\n    keys = undefined; // reset keys\n\n\n    // Compile a regular expression using the keys found in the given\n    // translitteration object.\n    //\n    // specialCases are joined together with a pipe; `|`\n    // singleLetters joined together and wrapped in square brackets so\n    // that the resulting regular expressing have the following format:\n    //\n    //     /aa|bb|cc|[abc]/g\n    //\n    // This should create a working regular expression that will look\n    // for every key in the transliteration table.\n    searchPattern = new RegExp([\n        specialCases,\n        singleLetter ? '[' + singleLetter + ']' : ''\n    ].join(singleLetter && specialCases ? '|' : ''), 'g');\n\n\n    /**\n     * Search for occurrences of entries in the translitteration table\n     * and replace these with their corresponding values.\n     *\n     * @param [String] subject to transliterate.\n     * @return [String] transliterated string\n     */\n    return function (subject) {\n        // input sanity check, we expect a string\n        if (typeof subject !== 'string') {\n            // Try to run toString, if it exist\n            if (subject && typeof subject.toString === 'function') {\n                subject = subject.toString();\n            }\n            // Return an empty string on empty and falsy input values\n            else {\n                return '';\n            }\n        }\n\n        // Replace letters in the input using the lookup table and the\n        // compiled search pattern.\n        return subject.replace(searchPattern, lookupTable);\n    };\n};","export const table = {\n    'А':'A',\n    'а':'a',\n    'Б':'B',\n    'б':'b',\n    'В':'V',\n    'в':'v',\n    'Г':'G',\n    'г':'g',\n    'Ґ':'Ĝ',\n    'ґ':'ĝ',\n    'Д':'D',\n    'д':'d',\n    'Е':'E',\n    'е':'e',\n    'Є':'Je',\n    'є':'je',\n    'Ж':'Ž',\n    'ж':'ž',\n    'З':'Z',\n    'з':'z',\n    'И':'Y',\n    'и':'y',\n    'І':'I',\n    'і':'i',\n    'Ї':'Ji',\n    'ї':'ji',\n    'Й':'J',\n    'й':'j',\n    'К':'K',\n    'к':'k',\n    'Л':'L',\n    'л':'l',\n    'М':'M',\n    'м':'m',\n    'Н':'N',\n    'н':'n',\n    'О':'O',\n    'о':'o',\n    'П':'P',\n    'п':'p',\n    'Р':'R',\n    'р':'r',\n    'С':'S',\n    'с':'s',\n    'Т':'T',\n    'т':'t',\n    'У':'U',\n    'у':'u',\n    'Ф':'F',\n    'ф':'f',\n    'Х':'H',\n    'х':'h',\n    'Ц':'C',\n    'ц':'c',\n    'Ч':'Č',\n    'ч':'č',\n    'Ш':'Š',\n    'ш':'š',\n    'Щ':'Šč',\n    'щ':'šč',\n    'Ю':'Ju',\n    'ю':'ju',\n    'Я':'Ja',\n    'я':'ja',\n    'ь':\"'\",\n    \"'\":\"'\"\n}","import translitEngine from 'translitit-engine';\nimport {table} from './lib/prudeus-ua-table'\n\nconst inputForm = document.querySelector('#input_form');\nconst outputForm = document.querySelector('#output_form');\nconst transliterate = translitEngine(table)\n\ninputForm.addEventListener('submit', e => {\n    e.preventDefault();\n    const inputText = e.target.querySelector('#input_text').value\n    const transcription = transliterate(inputText)\n    outputForm.querySelector('#output_text').value = transcription\n})\n\noutputForm.addEventListener('submit', e => {\n    event.preventDefault();\n    const copyTextarea = event.target.querySelector(\"#output_text\");\n    copyTextarea.focus();\n    copyTextarea.select();\n    navigator.clipboard.writeText(copyTextarea.value);\n});\n\n\n\n\n"],"names":["$b5d0dfac654e6a1a$exports","table","keys","specialCases","singleLetter","searchPattern","lookupTable","i","subject","input","Object","sort","a","b","length","slice","join","undefined","RegExp","toString","replace","$c1ce9d969bfa6909$var$inputForm","document","querySelector","$c1ce9d969bfa6909$var$outputForm","$c1ce9d969bfa6909$var$transliterate","$parcel$interopDefault","addEventListener","e","preventDefault","inputText","target","value","transcription","event","copyTextarea","focus","select","navigator","clipboard","writeText"],"version":3,"file":"index.60600437.js.map"}